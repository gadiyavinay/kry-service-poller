{"ast":null,"code":"import { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\nimport { MatTableModule } from '@angular/material/table';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AppRoutingModule } from './app-routing.module';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { StoreModule } from '@ngrx/store';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nexport let AppModule = /*#__PURE__*/(() => {\n  class AppModule {}\n\n  AppModule.ɵfac = function AppModule_Factory(t) {\n    return new (t || AppModule)();\n  };\n\n  AppModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: AppModule,\n    bootstrap: [AppComponent]\n  });\n  AppModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    providers: [],\n    imports: [[BrowserModule, AppRoutingModule, BrowserAnimationsModule, ReactiveFormsModule, HttpClientModule, FormsModule, MatTableModule, StoreModule.forRoot({}, {})\n    /**\n     * StoreModule.forRoot is imported once in the root module, accepting a reducer\n     * function or object map of reducer functions. If passed an object of\n     * reducers, combineReducers will be run creating your application\n     * meta-reducer. This returns all providers for an @ngrx/store\n     * based application.\n             StoreModule.forRoot(reducers, { metaReducers }),\n             /**\n     * @ngrx/router-store keeps router state up-to-date in the store.\n             StoreRouterConnectingModule,\n             /**\n     * Store devtools instrument the store retaining past versions of state\n     * and recalculating new states. This enables powerful time-travel\n     * debugging.\n     *\n     * To use the debugger, install the Redux Devtools extension for either\n     * Chrome or Firefox\n     *\n     * See: https://github.com/zalmoxisus/redux-devtools-extension\n              !environment.production ? StoreDevtoolsModule.instrument() : [],\n             /**\n     * EffectsModule.forRoot() is imported once in the root module and\n     * sets up the effects class to be initialized immediately when the\n     * application starts.\n     *\n     * See: https://github.com/ngrx/platform/blob/master/docs/effects/api.md#forroot\n     */\n    ]]\n  });\n  return AppModule;\n})();","map":null,"metadata":{},"sourceType":"module"}