{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatTableModule } from '@angular/material/table';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AppRoutingModule } from './app-routing.module';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HeaderComponent } from './header/header.component';\nimport { ServicesComponent } from './services.component';\nimport { StoreModule } from '@ngrx/store';\nlet AppModule = class AppModule {};\nAppModule = __decorate([NgModule({\n  declarations: [AppComponent, HeaderComponent, ServicesComponent],\n  imports: [BrowserModule, AppRoutingModule, BrowserAnimationsModule, ReactiveFormsModule, HttpClientModule, FormsModule, MatTableModule, StoreModule.forRoot({}, {})\n  /**\n   * StoreModule.forRoot is imported once in the root module, accepting a reducer\n   * function or object map of reducer functions. If passed an object of\n   * reducers, combineReducers will be run creating your application\n   * meta-reducer. This returns all providers for an @ngrx/store\n   * based application.\n           StoreModule.forRoot(reducers, { metaReducers }),\n           /**\n   * @ngrx/router-store keeps router state up-to-date in the store.\n           StoreRouterConnectingModule,\n           /**\n   * Store devtools instrument the store retaining past versions of state\n   * and recalculating new states. This enables powerful time-travel\n   * debugging.\n   *\n   * To use the debugger, install the Redux Devtools extension for either\n   * Chrome or Firefox\n   *\n   * See: https://github.com/zalmoxisus/redux-devtools-extension\n            !environment.production ? StoreDevtoolsModule.instrument() : [],\n           /**\n   * EffectsModule.forRoot() is imported once in the root module and\n   * sets up the effects class to be initialized immediately when the\n   * application starts.\n   *\n   * See: https://github.com/ngrx/platform/blob/master/docs/effects/api.md#forroot\n   */\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})], AppModule);\nexport { AppModule };","map":null,"metadata":{},"sourceType":"module"}